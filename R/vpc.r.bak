#' Calculate Vertical Proportions Matrix
#'
#' This function calculates the proportion matrix of facies along the vertical direction over the domain in a grid. 
#' @param data_Facies A data frame containing the columns 'x', 'y', 'z', and 'Facies' representing the coordinates and facies data. 
#' The column names must be exactly 'x', 'y', 'z', and 'Facies', respectively. 
#' The 'Facies' column should contain the facies categories in alphabetical or numeric codes.
#' Facies colum contains the category of Facies in alphabetic code or numeric code.
#' @param vpc_step A list of 'x', 'y', and 'z' values defining the partition of the examined grid.
#' @param xy_grid A list specifying the grid parameters. Use the format list(xmin, xmax, ymin, ymax) to indicate the minimum and maximum grid coordinates. 
#' along the east-west (EW) and north-south (NS) directions, where the proportion matrix is calculated.
#'
#' @return An array of proportions of facies for each partition of the grid (array).
#'
#' details The function calculates the vertical proportion curves, which represent the proportion of each facies category along the vertical direction within each partition of the grid. It takes into account the provided facies data and their corresponding spatial coordinates.
#'
#' @examples
#' # Example usage
#' vpc_step<-list(x = 2000, y = 2000, z=20)
#' xy_grid <-list(xmin=-16000, xmax = -12000, ymin = 16000, ymax = 20000)
#' vpc_results <- vpc(SFM_data, vpc_step, xy_grid)
#' # Example to plot the Vertical Proportion Curves (VPC) using ggplot2 package
#' \dontrun{
#'
#' library("ggplot2")
#' depth_scale <- as.numeric(dimnames(vpc_results)[[1]])
#' facies_categories <- dimnames(vpc_results)[[2]]
#' plot_title <- dimnames(vpc_results)[[3]]
#' ndepth_intervals <- nrow(vpc_results)
#' proportions_categories <- sort(rep(facies_categories, ndepth_intervals))
#' facies_colors <- c("orange", "black", "red","green","blue")
#' for (i in 1:dim(vpc_results)[[3]]){
#' proportions_vector <- c(vpc_results[ , ,i])
#' proportions_data <- data.frame(depth_scale,proportions_vector,proportions_categories)
#' colnames(proportions_data) <- c("Depth","Proportions","Facies")
#' dev.new()
#' print(ggplot(proportions_data, aes(y = Proportions,x = Depth, fill = Facies)) +
#' geom_area(size = 1) +
#' scale_fill_manual(values = facies_colors) +
#' coord_flip() +
#' ggtitle(plot_title[i])+
#' theme(legend.position = "none"))}
#' }
#'
#' @export

vpc <- function(data_Facies, vpc_step, xy_grid){
# Prepare Inputs
# ==============
freq_Facies <- table(data_Facies$Facies)
nfacies <- length(freq_Facies)
ndata <- nrow(data_Facies)
facies_categories <- rownames(table(data_Facies$Facies)) # in alphabetical order
# Create Matrix of Indicator Variables
# ====================================
data_indicators<-matrix(0, nrow = ndata, ncol = (3 + nfacies))
data_indicators[ ,1:3] <- cbind(as.numeric(data_Facies$x), as.numeric(data_Facies$y), as.numeric(data_Facies$z))
for (i in 1:nfacies){
data_indicators[which(data_Facies$Facies == facies_categories[i]),(i + 3)] <- 1
}
colnames(data_indicators) <- c("x","y","z",facies_categories)
# Divide the area in east-west and north-south
# ============================================
x_seq <- seq(xy_grid$xmin,xy_grid$xmax,vpc_step$x)
y_seq <- seq(xy_grid$ymin,xy_grid$ymax,vpc_step$y)
depth <- floor(as.numeric(data_Facies$z) / vpc_step$z)
depth_min <- min(depth);
depth_max <- max(depth);
ndepth_intervals <- length(table(depth))
prop <- array(NaN, dim = c(ndepth_intervals,nfacies,(length(x_seq) - 1) * (length(y_seq) - 1)))
m <- 1
plot_title <- c()
for (k in 1:(length(x_seq) - 1)){
index_x <- which(as.numeric(data_Facies$x) >= x_seq[k] & as.numeric(data_Facies$x)< x_seq[k + 1])
for (j in 1:(length(x_seq) - 1)){
index_y <- which(as.numeric(data_Facies$y) >= y_seq[j] & as.numeric(data_Facies$y)< y_seq[j + 1])
plot_title[m] <- paste("x from", x_seq[k],"to",x_seq[k + 1],"and y from",y_seq[j],"to",y_seq[j + 1] ,sep=" ")

# Calculate Verical Proportions for each x and y interval
# =======================================================
for (i in depth_min:depth_max){
index_depth <- which(depth == i)
index <- Reduce(intersect, list(index_x,index_y,index_depth))
if (length(index) > 1){
prop[i - depth_min + 1, , m] <- apply(data_indicators[index, 4:(nfacies + 3)], 2, sum) / length(index)
} else if(length(index_depth) == 1){
prop[i - depth_min + 1, ,m] <- data_indicators[index, 4:(nfacies + 3)]
}
colnames(prop) <- facies_categories
}
m <- m + 1
}
}
dimnames(prop)[[1]] <- seq(depth_min * vpc_step$z, depth_max * vpc_step$z, vpc_step$z)
dimnames(prop)[[3]] <- c(plot_title)
return(prop)
}

